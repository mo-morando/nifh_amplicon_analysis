#!/usr/bin/env python

"""
Snakefile for Analyzing nifH data for the nifh_amplicons_analysis workflow

This Snakefile defines a workflow for processing and analyzing biological data,
particularly focused on sample statistics, taxonomic breakdowns, and visualization.

Main steps in the workflow:
1. Load files from a workspace
2. Preprocess the loaded files
3. Calculate basic sample statistics
4. Perform sample taxonomic breakdown
5. Generate various plots and tables
6. Create world plots

The workflow also includes cleaning rules for removing intermediate and output files.

Usage:
    snakemake -j <num_cores> --use-conda

Note: This Snakefile requires a config.yaml file with appropriate settings.
"""

configfile: "config.yaml"


rule all:
    input:
        expand(
            f"{config['plot_dir']}/{{file}}{config['plot_ext']}",
            file=config["files_out_plot"],
        ),
        # expand(
        #     f"{config['plot_dir']}/{{file}}{config['plot_ext']}",
        #     file=config["files_out_plot_tax"],
        # ),
        expand(
            f"{config['plot_dir']}/{{file}}{config['plot_ext']}",
            file=config["files_out_wrld_plt"],
        ),
        expand(
            f"{config['output_dir']}/{{files}}.csv", files=config["files_out_tables"]
        ),


# Loading workspace files
rule load_files:
    """Load workspace files into the pipeline."""
    input:
        workspace=config["workspace"],
    params:
        output_dir=config["output_dir"],
    output:
        expand(f"{config['output_dir']}/{{file}}.csv", file=config["files_to_process"]),
    log:
        f"{config['output_dir']}/logs/load_files.log",
    conda:
        config["conda_env"]
    shell:
        "Rscript loading_files.R --workspace {input.workspace} --output_path {params.output_dir} > {log} 2>&1"


# Loading workspace files
rule preprocess_files:
    """Preprocess the loaded files."""
    input:
        expand(f"{config['output_dir']}/{{file}}.csv", file=config["files_to_process"]),
    params:
        input_files=",".join(config["files_to_process"]),
        input_dir=config["output_dir"],
        output_dir=config["output_dir"],
    output:
        expand(f"{config['output_dir']}/{{file}}.csv", file=config["files_out_process"]),
    conda:
        config["conda_env"]
    log:
        f"{config['output_dir']}/logs/preprocess_files.log",
    shell:
        """
        Rscript preprocess_files.R --files {params.input_files} --input_path {params.input_dir} --output_path {params.output_dir} > {log} 2>&1
        """


rule basic_sample_stats:
    """Calculate basic sample statistics."""
    conda:
        config["conda_env"]
    input:
        expand(f"{config['output_dir']}/{{file}}.csv", file=config["files_out_process"]),
    params:
        input_files=",".join(config["files_in_bss"]),
        input_dir=config["output_dir"],
        output_dir=config["output_dir"],
    output:
        expand(f"{config['output_dir']}/{{file}}.csv", file=config["files_out_bss"]),
    log:
        f"{config['output_dir']}/logs/basic_sample_stats.log",
    shell:
        """
        Rscript basic_samp_stats.R --files {params.input_files} --input_path {params.input_dir} --output_path {params.output_dir} > {log} 2>&1
        """


rule samp_tax_brkdwn:
    """Perform sample taxonomic breakdown."""
    conda:
        config["conda_env"]
    input:
        expand(f"{config['output_dir']}/{{file}}.csv", file=config["files_out_bss"]),
    params:
        input_files=",".join(config["files_in_stb"]),
        input_dir=config["output_dir"],
        output_dir=config["output_dir"],
    output:
        expand(f"{config['output_dir']}/{{file}}.csv", file=config["files_out_stb"]),
    log:
        f"{config['output_dir']}/logs/samp_tax_brkdwn.log",
    shell:
        """
        Rscript samp_n_tax_breakdwn.R --files {params.input_files} --input_path {params.input_dir} --output_path {params.output_dir} > {log} 2>&1
        """


rule make_plots:
    """Generate various plots from the processed data."""
    conda:
        config["conda_env"]
    input:
        expand(f"{config['output_dir']}/{{file}}.csv", file=config["files_out_stb"]),
    params:
        input_files=",".join(config["files_in_plot"]),
        input_dir=config["output_dir"],
        output_dir=config["plot_dir"],
        plot_ext=config["plot_ext"],
        plot_device=config["plot_device"],
    output:
        expand(
            f"{config['plot_dir']}/{{file}}{config['plot_ext']}",
            file=config["files_out_plot"],
        ),
    log:
        f"{config['output_dir']}/logs/make_plots.log",
    shell:
        """
        Rscript plots_out.R --files {params.input_files} --input_path {params.input_dir} --output_path {params.output_dir} --plot_ext {params.plot_ext} --plot_device {params.plot_device} > {log} 2>&1
        """


rule make_plots_tax:
    """Generate taxonomic plots."""
    conda:
        config["conda_env"]
    input:
        expand(f"{config['output_dir']}/{{file}}.csv", file=config["files_out_stb"]),
    params:
        input_files=",".join(config["files_in_plot_tax"]),
        input_dir=config["output_dir"],
        output_dir=config["plot_dir"],
        plot_ext=config["plot_ext"],
        plot_device=config["plot_device"],
    output:
        expand(
            f"{config['plot_dir']}/{{file}}{config['plot_ext']}",
            file=config["files_out_plot_tax"],
        ),
    log:
        f"{config['output_dir']}/logs/make_plots_tax.log",
    shell:
        """
        Rscript plots_taxonomy.R --files {params.input_files} --input_path {params.input_dir} --output_path {params.output_dir} --plot_ext {params.plot_ext} --plot_device {params.plot_device} > {log} 2>&1
        """


rule make_tables:
    """Generate output tables 4 and 5."""
    conda:
        config["conda_env"]
    input:
        expand(
            f"{config['input_dir_tables']}/{{file}}.csv",
            file=config["files_in_tables"],
        ),
    params:
        input_files=",".join(config["files_in_tables"]),
        input_dir=config["input_dir_tables"],
        output_dir=config["table_dir"],
    output:
        expand(
            f"{config['table_dir']}/{{files}}.csv", files=config["files_out_tables"]
        ),
    log:
        f"{config['output_dir']}/logs/make_tables.log",
    shell:
        """
        Rscript tables_4_5.R --files {params.input_files} --input_path {params.input_dir} --output_path {params.output_dir} > {log} 2>&1
        """


rule make_wrld_plts:
    """Create world plots."""
    conda:
        config["conda_env"]
    input:
        # expand(f"{config['output_dir']}/{{file}}.csv", file=config["files_in_wrld_plt"]),
        expand(
            f"{config['plot_dir']}/{{file}}{config['plot_ext']}",
            file=config["files_out_plot_tax"],
        ),
    params:
        input_files=",".join(config["files_in_wrld_plt"]),
        input_dir=config["output_dir"],
        output_dir=config["plot_dir"],
        plot_ext=config["plot_ext"],
        plot_device=config["plot_device"],
    output:
        expand(
            f"{config['plot_dir']}/{{file}}{config['plot_ext']}",
            file=config["files_out_wrld_plt"],
        ),
    log:
        f"{config['output_dir']}/logs/make_wrld_plts.log",
    shell:
        """
        Rscript wrldMaps_nifhDB.R --files {params.input_files} --input_path {params.input_dir} --output_path {params.output_dir} --plot_ext {params.plot_ext} --plot_device {params.plot_device} > {log} 2>&1
        """


# Cleaning rules
rule clean_load_files:
    params:
        files=expand(
            f"{config['output_dir']}/{{file}}.csv", file=config["files_to_process"]
        ),
        log=f"{config['output_dir']}/logs/load_files.log",
    shell:
        """
        for file in {params.files}; do
            if [ -f "$file" ]; then
            rm "$file"
            echo "Removed $file"
            fi
        done
        if [ -f "{params.log}" ]; then
            rm "{params.log}"
            echo "Removed {params.log}"
        fi
        """


rule clean_preprocessd_files:
    params:
        files=expand(
            f"{config['output_dir']}/{{file}}.csv", file=config["files_out_process"]
        ),
        log=f"{config['output_dir']}/logs/preprocess_files.log",
    shell:
        """
        for file in {params.files}; do
            if [ -f "$file" ]; then
            rm "$file" 
            echo "Removed $file"
            fi
        done
        if [ -f {params.log} ]; then
        rm "{params.log}"
        echo "Removed {params.log}"
        fi
        """


rule clean_basic_stats:
    params:
        files=expand(
            f"{config['output_dir']}/{{file}}.csv", file=config["files_out_bss"]
        ),
        log=f"{config['output_dir']}/logs/basic_sample_stats.log",
    shell:
        """
        for file in {params.files}; do
            if [ -f "$file" ]; then
                rm "$file"
                echo "Removed $file"
            fi
        done
        if [ -f "{params.log}" ]; then
            rm "{params.log}"
            echo "Removed {params.log}"
        fi
        """


rule clean_samp_tax_brkdwn:
    params:
        files=expand(
            f"{config['output_dir']}/{{file}}.csv", file=config["files_out_stb"]
        ),
        log=f"{config['output_dir']}/logs/samp_tax_brkdwn.log",
    shell:
        """
        for file in {params.files}; do
            if [ -f "$file" ]; then
                rm "$file"
                echo "Removed $file"
            fi
        done
        if [ -f "{params.log}" ]; then
            rm "{params.log}"
            echo "Removed {params.log}"
        fi
        """


rule clean_make_plots:
    params:
        files=expand(
            f"{config['plot_dir']}/{{file}}{config['plot_ext']}",
            file=config["files_out_plot"],
        ),
        log=f"{config['output_dir']}/logs/make_plots.log",
    shell:
        """
        for file in {params.files}; do
            if [ -f "$file" ]; then
            rm "$file"
            echo "Removed $file"
            fi
        done
        if [ -f "{params.log}" ]; then
            rm "{params.log}"
            echo "Removed {params.log}"
        fi
        """


rule clean_make_plots_tax:
    params:
        files=expand(
            f"{config['plot_dir']}/{{file}}{config['plot_ext']}",
            file=config["files_out_plot_tax"],
        ),
        log=f"{config['output_dir']}/logs/make_plots_tax.log",
    shell:
        """
        for file in {params.files}; do
            if [ -f "$file" ]; then
            rm "$file"
            echo "Removed $file"
            fi
        done
        if [ -f "{params.log}" ]; then
            rm "{params.log}"
            echo "Removed {params.log}"
        fi
        """


rule clean_make_tables:
    params:
        files=expand(
            f"{config['output_dir']}/{{files}}.csv", files=config["files_out_tables"]
        ),
        log=f"{config['output_dir']}/logs/make_tables.log",
    shell:
        """
        for file in {params.files}; do
            if [ -f "$file" ]; then
            rm "$file"
            echo "Removed $file"
            fi
        done
        if [ -f {params.log} ]; then
            rm "{params.log}"
            echo "Removed {params.log}"
        fi
        """


rule clean_make_wrld_plts:
    params:
        files=expand(
            f"{config['plot_dir']}/{{file}}{config['plot_ext']}",
            file=config["files_out_wrld_plt"],
        ),
        log=f"{config['output_dir']}/logs/make_wrld_plts.log",
    shell:
        """
        for file in {params.files}; do
            if [ -f "$file" ]; then
            rm "$file"
            echo "Removed $file"
            fi
        done
        if [ -f "{params.log}" ]; then
            rm "{params.log}"
            echo "Removed {params.log}"
        fi
        """

rule clean:
    """Remove output files only but leave directory structure, log files, and conda environment"""
    shell:
        """
        echo "Cleaning output files only"
        snakemake -c 1 --use-conda --delete-all-output
        """

rule superclean:
    """Remove all directories, outputs, logs, and conda environment"""
    params:
        log=f"{config['output_dir']}/logs",
        files_dir=config["output_dir"],
        plot_dir=config["plot_dir"],
        tables_dir=config["table_dir"]
    shell:
        """
        echo "Cleaning all output files and directories"
        for dir in {params}; do
            if [ -d "$dir" ]; then
            rm -r "$dir" 
            echo "Removed $dir"
            else
                echo "Directory $dir does not exist"
            fi
        done
        echo "Removing conda environment made by this snakefile"
        if [ -d .snakemake/conda ]; then
            rm -r .snakemake/conda/
            echo "Conda environment removed"
        fi
        """
